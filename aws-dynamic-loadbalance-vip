
############### HTTP-SERVER++++++++++++++++++++++
# doing http by nc
# while true; do { echo -e 'HTTP/1.1 200 OK\r\nContent-Length: 160\r\n\r\n'; ip addr|grep eth0; } | nc -l 80; done

######## CLIENT
# curl aws-elastic-ip     # also the port1 of FGT public-ip, or private-ip of port1

###### fix the nohup not-working: 
#nohup python3 -u myweb.py &

#!/usr/bin/env python3

from http.server import HTTPServer, BaseHTTPRequestHandler
import socket 
from io import BytesIO
import ssl
import subprocess 

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        #content_str = 'Hello,EARTH!\r\nFrom:\t'
        #content_str = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'
        # hostname -I to get the local IP, but '-I' is not supported by windows
        content_str = subprocess.check_output('hostname ', shell=True).decode('utf-8')
        content = content_str.encode();  # convert to byte      
        self.send_header('Content-Length',len(content_str))
        self.send_header('Content-type', 'text/html')
        #self.send_header('Content-Encoding','gzip')
        #self.send_header('Content-Encoding','deflate')
        self.end_headers()

        self.wfile.write(content)
       

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        self.send_response(200)
        self.end_headers()
        response = BytesIO()
        #response.write(b'This is POST request. ')
        #response.write(b'Received: ')
        response.write(body)
        self.wfile.write(response.getvalue())

httpds = HTTPServer(('0.0.0.0', 443), SimpleHTTPRequestHandler)
httpds.socket = ssl.wrap_socket (httpds.socket, 
        keyfile='mywebkey.pem', 
        certfile='mywebcert.pem', server_side=True)
httpds.serve_forever()


httpd = HTTPServer(('0.0.0.0', 8005), SimpleHTTPRequestHandler)
# has to comment out for ipv6 support to execute following states:
httpd.serve_forever()

class HTTPServerV6(HTTPServer):
    address_family = socket.AF_INET6
httpd6 = HTTPServerV6(('::', 8006), SimpleHTTPRequestHandler)
#httpd6.serve_forever()


